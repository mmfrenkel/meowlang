(* Code generation: translate takes a semantically checked AST and
produces LLVM IR

LLVM tutorial: Make sure to read the OCaml version of the tutorial

http://llvm.org/docs/tutorial/index.html

Detailed documentation on the OCaml LLVM library:

http://llvm.moe/
http://llvm.moe/ocaml/

*)

module L = Llvm
module A = Ast
open Exceptions
open Sast

module StringMap = Map.Make(String)

(* translate : Sast.program -> Llvm.module *)
let translate (_, functions, _) =

  let context    = L.global_context () in

  (* Create LLVM compilation module which will hold generated code *)
  let the_module = L.create_module context "Meowlang" in

  (* Get types from the context *)
  let i32_t     = L.i32_type    context
  and i8_t      = L.i8_type     context
  and i1_t      = L.i1_type     context
  and float_t   = L.double_type context
  and void_t    = L.void_type   context
  and str_t     = L.pointer_type  (L.i8_type  context)
  in

  (* Return the LLVM type for a Meowlang type *)
  let rec ltype_of_typ = function
      A.Int   -> i32_t
    | A.Bool  -> i1_t
    | A.Float -> float_t
    | A.Void  -> void_t
    | A.String -> str_t
    | _ -> raise (NotYetSupported("complex types not yet supported"))
    (* | A.Arrtype(sz, typ) -> L.array_type (ltype_of_typ typ) sz *)
  in

  (* Create the prototype for printf built-in function *)
  let printf_t : L.lltype =
      L.var_arg_function_type i32_t [| L.pointer_type i8_t |] in
  let printf_func : L.llvalue =
      L.declare_function "printf" printf_t the_module in

  (* Define each function as prototype (arguments and return type) so we can
     call it even before we've created its body *)
  let function_decls : (L.llvalue * sfunc_decl) StringMap.t =
      let function_decl m fdecl =
        let name =  fdecl.sfname
        and formal_types = Array.of_list (List.map (fun (t,_) -> ltype_of_typ t) fdecl.sformals)
        in
        let ftype = L.function_type (ltype_of_typ fdecl.styp) formal_types in
        StringMap.add name (L.define_function name ftype the_module, fdecl) m in
    List.fold_left function_decl StringMap.empty functions in

  (* Fill in the body of the each function *)
  let build_function_body fdecl =
    let (the_function, _) = StringMap.find fdecl.sfname function_decls in
    let builder = L.builder_at_end context (L.entry_block the_function) in

    let str_format_str = L.build_global_stringptr "%s\n" "fmt" builder in

    (* Construct code for an expression; return its value *)
    let rec expr builder ((_, e) : sexpr) = match e with
	      SILiteral i  -> L.const_int i32_t i
      | SStringLit s -> let lit_string = L.build_global_stringptr s "str" builder in lit_string
      | SFunctionCall ("Meow", [e]) ->
	        L.build_call printf_func [| str_format_str ; (expr builder e) |] "printf" builder
      | _ -> raise (NotYetSupported("complex expr and functinons other than Meow not yet supported"))
    in

    (* LLVM insists each basic block end with exactly one "terminator"
       instruction that transfers control.  This function runs "instr builder"
       if the current block does not already have a terminator.  Used,
       e.g., to handle the "fall off the end of the function" case. *)
    let add_terminal builder instr =
      match L.block_terminator (L.insertion_block builder) with
	      Some _ -> ()
      | None -> ignore (instr builder) in

    (* Build the code for the given statement; return the builder for
       the statement's successor (i.e., the next instruction will be built
       after the one generated by this call) *)
    let rec stmt builder = function
	      SBlock sl   -> List.fold_left stmt builder sl
      | SExpr e     -> ignore(expr builder e); builder
      | SReturn e   -> ignore(
          match fdecl.styp with
              (* Special "return nothing" instr *)
              A.Void -> L.build_ret_void builder
              (* Build return statement *)
            | _ -> L.build_ret (expr builder e) builder ); builder
      | _ -> raise (NotYetSupported("complex stmts not yet supported"))
    in

    (* Build the code for each statement in the function *)
    let builder = stmt builder (SBlock fdecl.sbody) in

    (* Add a return if the last block falls off the end *)
    add_terminal builder (
      match fdecl.styp with
        A.Void -> L.build_ret_void
      | A.Float -> L.build_ret (L.const_float float_t 0.0)
      | t -> L.build_ret (L.const_int (ltype_of_typ t) 0))
  in

  List.iter build_function_body functions;
  the_module
